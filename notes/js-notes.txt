**Java Script Notes

*Internal
	-Simplest way to add js to HTML file is to embed the code inside <script> tags.

*External
	-Note: if script tag for your JS than put it at the bottom of the HTML so it can find the elements after the DOM has been rendered.

	OR if seperate JS file

	(prferred)**
	<head>
		<script src="js-file.js" defer></script> (the defere tells browser to not load the script file until AFTER the html is loaded.
	</head>

*Variables

	-Can declare variables with var, let or const
	-var is depreciated so use the other two options
	


*+ Operator
	-+ does both addition and string concentation
	-JS will do hybrid where possible i.e. convert string numbers to numbers, then perform the addition on them
	
*Note??
	Interpreter works from right to left
	
	NOTE>  Console.table to log a table.
{}.filter(function(func_name)):
	
*Operators/Key Words

	-NaN = not a Numebr.  JS will throw this when trying to do math with strings.
		-isNaN() returns bool based on result
	-Infinity/-Infinity
		-(2/0 returns infinity)
	-Hex notation: 0xNN
	-== 
		-Checks equality in both type and value.
	-+, -, *, **, /, %, ++, --
		-ALl work typically except +
	->, <, =<, =>, !=, &&, ||, |, &, +=, -=, *=, /=, !, <<, >>, ~, ^
		-Logical operators, all work as expected


	-Operators follow PEMDAS order.  There is an elaborate hierarchy, look it up online.


*Data Types
	-There are 8 types, and any of them can go into a variable.

	-Number 
		-(2^53-1)
		-Can use scientific notaion
			-let y = 123e5  or 123e-5
		-Numbers are 64 bit floating point by default with a maximum of 17 decimal places
			-Can be better to multiply and divide to avoid floating point hell. (multiply everything by ten, then divide for your final answer by ten.)
		-.toString.  All numbers this method.  takes a base and returns a string. Base can be from 2 to 36.
		-Numbers can be objects, but do NOT do this.				
	-BigInt 
		-Any arbitray Length
		-Add n to the end of a number to denotate.
	-String
		-'' or "" are the same and used for generic strings.  Can switch between them to 'escape' the other type insie a string
		- Can also just \', \" to escape
		-`` are specail and used to embed variables and expressions in ${}
		-+ to concantate.  Can concantate variables and stings
		-See concantate section
		-Can use Number(string) to convert to number
		-Template literals (string formatting) syntax
			let output  = 'I like the song "${ song }".  I gave is a score of ${ score/highestScore * 100}';
			examReport = `You scored ${ examScore }/${ examHighestScore } (${ Math.round(examScore/examHighestScore*100) }%). ${ examScore >= 49 
			 				'Well done, you passed!' : 'Bad luck, you didn\'t pass this time.' }`;
			that syntax? output = ' ${ score > 50 ? 'Passed!' : 'Failed' }';
			-These respect newlines so you dont need to worry about those.
	-Boolean
		-true or false
	-null
		-represents nothing
	-undefined
		-variable is not set
	-object
		-stores multiple things under one name
	-symbol
		-for unique identifiers declared with Symbol("")
	-typeof
		-returns the type of the variable
		
*Conditonals
	-Comparisons
		Comparing strings, compares the unicode of each cahr left to right
		Comparing different types, JS tries to convert them to numbers and do the comparison
		
		=== is strict equality.  compares the two items WITHOUT any type conversions.
		!== strict not equality.
		
		null compares to 0, undefined compares to NaN
		
		THere are a bunch of weird cases here,  If I get into the weeds on conditonals find a good reference and double check.
		Some rules of thumb to avoid most complications
			-Treat any comparison to undefine/null with extra care
			-Dont use >=, >, <, <= with a variable that may be null/undefined.  Leads to trouble.  Just chaeck that first and handle seperately.

	-If
		if (condition) {
		}
		
		if (condition) {
		} else {
		}
		
		if (condition1) {
		} else if (condition2) {
		} else {
		}
		
	-Switch
		switch (expression) {
			case x:
				break;
			case y:
				break;
			default:
		}
		
	-Ternary
		Takes the place of a simple if else block
		(condition) ? run this code(true) : run this code instead (false)
		
*Loops
	-break
		-immediately stops and breaks out of the loop
	-continure
		-goes back to the beginining of the loop.
	

*Functions
	-Standard Template
		function functionName(param) {
			console.log(param + "this function is dope")
		}

		funcationName("goats??");

	-Arrow Function (just a 'simpler' way to write funcitons).

		let func = (arg1, arg2, ... argN) => expression

		is the same as

		let func = function(arg1, arg2, .. argN) {
		 return expression;
		}

		-Slick multi-line function template:

			let welcome = (age < 18) ?
				() => alert('Hello') :
				() => alert('Greetings');
				
			let sum = (a, b) => {
				let result = a + b;
				return result;
			};

*Best Practices
-Errors
	-Common error types
		-Syntax Error
		-Reference error: using variables that DNE or have not been declared
		-Type Error: ??
	-Tips for error correction
		-Read the error carefully, and try to parse it out
		-Google the error
		-Use the debugger
		-Console.log()

	-Clean code
		-You spend more time reading code than writing code.

	-Rules of thumb
		-Be consistent
		-Always put semi colons even thouggh js compiler will mostly insert them for you
		-Limit length of lines to 80 charecters
		-Use descriptive anmes, use camelCase
			-Variable names should start with nounds
			-function names should start with verbs
		-Use proper indentation
		-Use comments judiciously to explain specific things, don't use to many and dont use them as a notes.

*Arrays
-Template
	-let name = []
	-let name = ["c", ..... "z"]

-Built in methods
	-.toString()	
		-Converts to a CSV string
	-.join(seperator) 
		-Same as toString but specifiy seperator




	-.pop() 
		-Removes last element and returns it
	-.push() 
		-Adds an item to end of array and returns the new length
		-Pop items out of an array and push items into an array
	-.shift() 
		-Removes the first elements and moves all other elements lower, returns the removed item]
	-.unshift() 
		-Adds element to begginng and moves all elements higher, returns new array length]
	-.length() 
		-Duh
	-.splice(where, remove how many, new elem1....)	
		-Can use to remove items also
	-.concat()
		-let newArray = array1.concat(array2)  [combines arrays together, returns a new array, can take arbitray number of arguments, can also take strings]
	-.slice(start, end) 
		-Returns a new array that only includes the sliced elements.
	-.forEach()
		-array.forEach((item) => {
			expression
		});
	-.includes()


*Intermediate Array methods
	-Very useful, will greatly increase JS abilities.
	-.filter()
		-Loop throug each item in the array and do something to that item.  returns a subset of the array that matchs your criteria

		-const fifteen = inventors.filter(function(inventor) {
			if(inventor.year >= 1500 && inventor.year < 1600)
			});	
	-.sort()
		-perform your check and return 1 or -1 on each item.  this fiunction will bubble through the array aplying the list until each item bubbles into it's correct place.
	-.map()
		-Takes in an array, does something to it and returns an array with the same legnth (stamps it)
	-.reduce()
		-Builds a new thing from the exsisting thing?
	-.some()
		-Check if at lease ONE thing is what you are looking for
	-.every()
		-Check if every item is your condition
	-.find()
		-Like filter, but only returns one item that matches

	-findIndex()
		-Like find but it finds the index of the item in question.
	-spreads
		-...

*Regular Expressions (RegEx)
	-A regex expression takes the form of a literal between two back slashes: 
		-let re = /ab+c/
	or
		-let re = new RegExp('ab+c')

	-RegEx are simple patterns that allow EXACT mathcing for subsets of strings
	-Can use these patterns with regexp.test(), exec()
	-For strings can use String match(), replace(), search(), split()

*Document Object Model (DOM)
	-Parent Child/Tree relationship between objects on the page
	-Can select these objects in JS to manipulate them.
	-Can use CSS or relationships to slect objects to manipulate them.
		div.display
		.display
		#contatiner>.display
		div#contatin>div.display
-Relational selectors
		-const container = document.querySelector('#contatiner');
		-console.dir(container.firstElementChild);
		-const controls = document.querySelectro('.controls');
		-console.dir(controle.previosElementsSibling);

	-Query Selectors
		-element.querySelector(selector);  retirns reference to tje cirst match of selector
		-element.querySelectorAll(seletors);  Returns a node list conteainin references to all of the matches of the selectors
	    		-Can convert a nodelist to an array using Array.from() if you need to
	    
	-Element create
		-const div = document.createELeement('div', [options])
			-note, this only creates the element in memeory
		
	-parentNode.appendChild(childNode)  
		-Adds the child node to the end of parent
	-parentNode.InsertBefore(newNode, referenceNode) 
		-inserts newNode into parent node before reference node

	-parentNode.removeChild(child) 
		-removes the child from the parent

	-Altering elelemnts

	-Have to get the reference first
		-const div = document.createElement('div')

	-examples of changing some styling
		-div.style.color = 'blue';

	-div.style.cssText = 'color: blue; background: white';

	div.setAttributes('style', 'color: blue; background: white');

	-If your accessing kebab case css, you need to use camel case instead

	-Edit attributes (the parts inside the tags?)
	-div.setAttribute('id;, 'theDiv')
	-duv.getAttributes('id'); (would return 'theDiv')
	-div.removeAttribute('id')

-Classes
	-div.classList.add('new');
	-div.classList.remove('new');
	-div.classList.toggle('active');
		-cleaner to toggle css style on aand off rether than adding and removing them from the DOM
	-Add text content (PREFEREED)
		-div.textContent = 'Hello World';
	-Add HTML content
		-div.innerHTML = '<span>Hello World!</span>';

-Events
	-Can attach with:
		-function directly on html element
		-set on-event property on the DOM object 
		-attach event listener to the nodes in your java script.

	-Event listeners are the prefered method** But all three are regularly used.
		-1: <button onclick="alert('Hello World')">Click Me</button>
		-2: <button id="btn">Click Me</button>
		const btn = document.querySelector('#btn');
		btn.onclick = () => alert('Hello World');
		-3:<button id="btn2">Click me 2</button>
		const btn2 = document.querySelector('#btn2')
		btn2.addEventListener('click', () => {
		    alert("hello World");
		});
		-For all three methods.  you can call a function instead of embedding the code directly

	-Can also get access to the event property (e)

	-Can attach listeners to groups of nodes.  use item = quearySelectorAll("")
	thenL item.forEach((item) => {
		button.addEventListener('click', () => {
		alert(button.id);
		
	-Some common events
	-click, dblclick, keypress, keydown, keyup

	-More selecting
	-can use tag-name[attribute] to narrow down searches


	-class list, adds a class to an aelement 
		-can have additonal styling that you add onto an

*Objects
	-All functions are objects and all objects are function
	-Template
		const myObject = {
			property1: 'Value',
			property2: 'value',
			"function property": function() {
			}
		}
	-Members
		-Acces with:
			myOBject.property1
			or
			myObject['property1']
	-Constructor
		-function Player(name, marker) {
			this.name = name
			this.marker = marker
			this.sayName = function() {
				console.log(name) //note: don't put console logs in here
			}
		}
		
		-Instantiate
			const player = new Player('steve', 'X')
		
	-Prototypes
		-Common to all objects in JS.
		-Prototype is the thing that the instantiated object inherits from
		-Protoypres are how you do inheritance in JS.
			-Create a fruit function/object with props and mthods.
		-Essentially use ObjectName.prototype to add items onto the oriignal object?  
		-If you are using constructors, it is best to define functions on the prototype of that object.
			-If you declare the function on the constructor, than every time you instantiate the object, the funciton gets diplicates, wasting resources.
			
		Final template??
			function Book(title, author, numPages, haveRead) {
				this.title = title;
				this.author = author;
				this.numPages = numPages;
				this.haveRead = haveRead;
			}
			
			Book.prototype.info = function() {
					return `${this.title} by ${this.author}, ${this.numPages}, ${this.haveRead? 'have read' : 'not read yet'}`
				}
				
			const theHobbit = new Book('The Hobbit', JRR Tolkein', 1000, true);
			console.log(theHobbit.info());
			
			
			
		-Prefered way to do inheritance today
			function Student() {
				
			}
			
			Student.prototype.sayName = function() {
				return(this.name)
			}
			
			function EightGrader(name) {
				this.name = name
				this.grade = 8
			}
			
			EIgthGrader.prototype = Object.create(Student.prototype)
			
			const carl = new EigthGrader('carl')
			cral.sayName()
			carl.grade
			
			
	-Factory Functions:
	*Constructors are not the prefered way.  They can cause some wonky behavior, and the factory function is prefereed.  Constructors are popular as thehy amtch up with other languages so be 			ready to see them.
		-Template:
		const personFactory = (name, age) => {
			const sayHello = () => console.log('Hello!');
			return { name, age, sayHello };		//Note this uses a short hand.  MUST be named exactsame as arguments
		}
		
		const jeff = personFactory('jeff', 27);
		
		consol.log(jeff.name); //jeff
		
		jeff.sayHello();
		
		-Shorthand Template
		
		-Inheritance Example
		const Person = (name) => {
			const sayName = () => console.log(`my name is ${name}`)
			return {sayName}
		}
		
		const Nerd = (name) => {
			const {sayname} = Person(name)
			const doSOmethingNerdy = () => console.log('nerd studd')
			return {sayName, doSOmethingNerdy}
		}
		
		const jeff = Nerd('jeff')
		
		jeff.sayName()
		jeff.doSomethingNerdy()
		
		
		
		
	-Random Tip
		const name = 'maynard'
		const color = 'red'
		
		console.log({name, color); // {name: maynard, color: red}
		
	-Scope
		-Globally scoped means scoped to the window (i think)
		-Vars:  Are only function scoped OR globally scoped.
		-Let / const: Are block scoped.  
			-A block is essentially anything that gets curly braced.
			-Use this to stop memory leaks and keep it organized.
	-Closure
		-THe idea that a function (which is also a class) has private memebers that can only accesed from within the function.
		-ALways keep as much stuff as private as possible.  THis eliminates dependencies
	
	-Module Pattern
		-The parenthesis somehow immedaitely invoke an instance of the class?
		-Use this when you want to make ONE object, then immediately use it.  A nice way to organize your code.
		-Template
		const calculator = (() => {
			const add = (a, b) => a + b;
			const sub = (a, b) => a - b;
			const mul = (a, b) => a * b;
			const div = (a, b) => a / b;
			
			return {
				add,
				sub,
				mul,
				div,
			};
		})();
		
		//Note, no need to create an object
		calculator.add(4,7);
		
		
	-IIFE (immediately invoked function expression [ 'iffy' ]
		-Template
		(function () {
		
		})();
		
	-Classes: JS has classes implemented.  Really just a wrapper (syntactic sugar) over other functionality to ft JS in more with other languages.  Controversial, and not currently in fashion.
		-template:
			class MyClass {
				constructor(name) {
					this.name = name;
				}
				
				get name() {
					return this._name;
				}
				
				set name(value) {
					if(value.length < 4) {
						alert("Name is too short.");
						return;
					}
					this._name=value;
				
				sayHi() {
					alert(this.name);
				}
				
			let user = new MyClass("john");
			user.sayHi();
			user.name;
			

















































FOr loop
for (let i = 1; i <= condition; i==) {
	expressions
}
