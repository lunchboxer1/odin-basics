Document Object Model (DOM)

Parent Child/Tree relationship between objects on the page

Can select these objects in JS to manipulate them.

Can use CSS or relationships to slect objects to manipulate them.

div.display
.display
#contatiner>.display
div#contatin>div.display

Relational selectors
const container = document.querySelector('#contatiner');

console.dir(container.firstElementChild);

const controls = document.querySelectro('.controls');

console.dir(controle.previosElementsSibling);

--Query Selectors
element.querySelector(selector);  retirns reference to tje cirst match of selector
element.querySelectorAll(seletors);  Returns a node list conteainin references to all of the matches of the selectors
    Can convert a nodelist to an array using Array.from() if you need to
    
--Element create
const div = document.createELeement('div', [options])
	note, this only creates the element in memeory
	
-parentNode.appendChild(childNode)  Adds the child node to the end of parent
-parentNode.InsertBefore(newNode, referenceNode) inserts newNode into parent node before reference node

-parentNode.removeChild(child) removes the child from the parent

altering elelemnts

//Have to het the reference first
const div = document.createElement('div')

//examples of changing some styling
div.style.color = 'blue';

div.style.cssText = 'color: blue; background: white';

div.setAttributes('style', 'color: blue; background: white');

If your accessing kebab case css, you need to use camel case instead

Edit attributes (the parts inside the tags?)
div.setAttribute('id;, 'theDiv')
duv.getAttributes('id'); (would return 'theDiv')
div.removeAttribute('id')

--Classes
div.classList.add('new');
div.classList.remove('new');
div.classList.toggle('active');
	cleaner to toggle css style on aand off rether than adding and removing them from the DOM

--Add text content (PREFEREED)
div.textContent = 'Hello World';

--Add HTML content
div.innerHTML = '<span>Hello World!</span>';

Note: if script tag for your JS than put it at the bottom of the HTML so it can find the elements after the DOM has been rendered.

OR if seperate JS file

(prferred)**
<head>
	<script src="js-file.js" defer></script> (the defere tells browser to not load the script file until AFTER the html is loaded.
</head>


--Events
Can attach by
-function directly on html element
-set on-event property on the DOM object 
-attach event listener to the nodes in your java script.

Event listeners arre the prefered method** But all three are regularly used.

1: <button onclick="alert('Hello World')">Click Me</button>

2: <button id="btn">Click Me</button>
const btn = document.querySelector('#btn');
btn.onclick = () => alert('Hello World');

3:<button id="btn2">Click me 2</button>
const btn2 = document.querySelector('#btn2')
btn2.addEventListener('click', () => {
    alert("hello World");
});

For all three methods.  you can call a function instead of embedding the code directly

Can also get access to the event property (e)

can attach listeners to groups of nodes.  use item = quearySelectorAll("")
thenL item.forEach((item) => {
	button.addEventListener('click', () => {
	alert(button.id);
	
Some common events
click, dblclick, keypress, keydown, keyup

--More selecting
can use tag-name[attribute] to narrow down searches


class list, adds a class to an aelement 
	-can have additonal styling that you add onto an





